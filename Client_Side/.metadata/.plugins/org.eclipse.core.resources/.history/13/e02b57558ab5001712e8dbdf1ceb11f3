package UI.Frames.Statistics;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.Map;
import java.util.Vector;

import org.json.JSONException;

import Customer.CreateCustomerException;
import Customer.Customer;

import java.util.Map.Entry;

import javax.swing.JCheckBox;
import javax.swing.JPanel;

import Items.ItemAmount;
import Items.eItemCategory;
import Items.eItemsName;
import ServerFunctions.FromServerException;
import ServerFunctions.ServerFunctionExecuter;
import UI.Frames.checkBoxTabledFrame;
import UI.Frames.tableFrame;
import Workers.CreateWorkerException;
import Workers.Worker;
import Workers.eBranches;

@SuppressWarnings("serial")
public class byBranchFrame extends checkBoxTabledFrame{
	
	private Vector<JCheckBox> branchCheckBoxes;
	
	public byBranchFrame() throws UnknownHostException, JSONException, IOException, FromServerException, CreateCustomerException, CreateWorkerException
	{
		super();
	}

	@Override
	protected  void setTableData(Vector<Vector<Object>> i_Data) throws UnknownHostException, IOException, FromServerException, JSONException, CreateCustomerException {
		
		Vector<String> selectedValues = new Vector<String>(); 
		for(JCheckBox checkbox : branchCheckBoxes)
		{
			if(checkbox.isSelected())
			{
				selectedValues.add(checkbox.getText());
			}
		}
		
		Map<Customer,Vector<ItemAmount>> dataFromServer= ServerFunctionExecuter.getInstance().GetTodaySalesReporyByBranch(selectedValues);
		
		
		for(Entry<Customer, Vector<ItemAmount>> personPurcases : dataFromServer.entrySet())
		{
			for(ItemAmount itemAmount : personPurcases.getValue())
			{
				i_Data.add(new Vector<Object>(){{
					this.add(personPurcases.getKey().toString());
	   	  			this.add(itemAmount.getItemName());
	   	  			this.add(itemAmount.getItemCategory());
	   	  			this.add(itemAmount.getAmount());
	   	  			this.add(itemAmount.getBranch());
				}});
			}
		}
	}

	@Override
	protected Vector<String> getColumnsNames() {
		Vector<String> columnNames = new Vector<String>();
		columnNames.add("Customer");
		columnNames.add("Item Name");
		columnNames.add("Category");
		columnNames.add("Amount");
		columnNames.add("Branch");
		return columnNames;
	}

	@Override
	protected String getFrameTitle() {
		return "Report by branch";
	}

	@Override
	protected ActionListener setCheckboxActionListener(JCheckBox checkBox) {
		return new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				int i;
				if(checkBox.isSelected())
				{
					
					Map<eItemsName, ItemAmount> dataFromServer;
					try {
						dataFromServer = ServerFunctionExecuter.getInstance().GetTodaySalesReporyByBranch(i_BranchName)(new String [] {checkBox.getText()});
					
					
					for(Entry<eItemsName, ItemAmount> Row : dataFromServer.entrySet()){
						data.add(new Vector<Object>(){{
							this.add(Row.getKey().name());
							this.add(Row.getValue().getAmount());
							this.add(Row.getValue().getItemCategory());
							this.add(Row.getValue().getBranch().toString());
							}}); //end of data adding
						} //end of inner for
					
					} catch (IOException | FromServerException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				else
				{
					for(i=0;i<myTableData.size();i++)
					{
						if(myTableData.get(i).get(2).toString().compareTo(checkBox.getText())==0)
						{
							break;
						}
					}
					myTableData.remove(i);
				}
				
			}
		};
	}

	@Override
	protected String[] getCheckboxValues()
	{
		String[] names = new String[eBranches.values().length];
		for(int i=0;i<names.length;i++)
		{
			names[i] = eItemsName.values()[i].name();
		}
		return names;
	}
}
