package UI.Frames.AddRemove;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;

import org.json.JSONException;

import Customer.CreateCustomerException;
import Person.Person;
import ServerFunctions.FromServerException;
import ServerFunctions.ServerFunctionExecuter;
import UI.Popups;
import UI.superButton;
import UI.Frames.SendingActionListener;
import UI.Frames.allFramesBase;
import UI.Frames.sendingFrame;
import Workers.CreateWorkerException;
import Workers.Worker;

@SuppressWarnings("serial")
public class removeWorkerFrame extends sendingFrame {

	private JLabel workerNameLabel;
	private JComboBox<Person> workerName;
	private Worker workerToRemove;
	
	public removeWorkerFrame()
	{
		super();
	}

	@Override
	protected String getFrameTitle()
	{
		return "Remove worker";
	}

	@Override
	protected int getFrameWidth()
	{
		return (int)(Toolkit.getDefaultToolkit().getScreenSize().width * 0.3);
	}

	@Override
	protected int getFrameHeight()
	{
		return (int)(Toolkit.getDefaultToolkit().getScreenSize().height * 0.15);
	}

	@Override
	protected JPanel createMainPanel()
	{
		JPanel myMainPanel = new JPanel();
		
		try
		{
			workerNameLabel = new JLabel("Choose worker -");
			workerName = new JComboBox<Person>(ServerFunctionExecuter.getInstance().GetAllWorkers());
			workerName.setPreferredSize( new Dimension( 200, 30 ) );
		
			myMainPanel.add(workerNameLabel);
			myMainPanel.add(workerName);
		}
		catch(JSONException | CreateCustomerException | CreateWorkerException parsing_ex)
		{
			Popups.ShowError("Problem with parsing from server\n"+parsing_ex.getMessage());
		}
		catch (FromServerException fsex)
		{
			fsex.ShowPopup();
		}
		catch (IOException ioex)
		{
			Popups.ServerConnectionError(ioex.getMessage());
		}
		
		return myMainPanel;
	}

	@Override
	protected String getSendButtonName() {
		return "Remove!";
	}

	@Override
	protected SendingActionListener OnSendButtonClicked() {
		return new SendingActionListener(){
		      public void sendAction(ActionEvent e){
		    	  	
		    	  workerToRemove = (Worker) workerName.getSelectedItem();
		    	  try 
		    	  {
		    		  ServerFunctionExecuter.getInstance().RemoveWorker(workerToRemove);
		    	  }
		    	  catch (FromServerException fsex)
		    	  {
		    		  fsex.ShowPopup();
		    	  }
		    	  catch (IOException ioex)
		    	  {
		    		  Popups.ServerConnectionError(ioex.getMessage());
		    	  }
		    	  
		      }};
	}

	@Override
	protected String getOnSuccessMessage()
	{
		return String.format("%s removed successfuly!",workerToRemove.toString());
	}
} //end of removeFrame class
