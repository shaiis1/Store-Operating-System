package Purchase;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.Map;

import org.json.JSONAble;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import Customer.CreateCustomerException;
import Customer.Customer;
import Customer.CustomerFactory;
import Items.Item;
import Workers.Cashier;
import Workers.eBrunches;

public class Purchase extends JSONAble
{
	private static final DateFormat s_DateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
	private Map<Item,Integer> m_ItemsAmount;
	private Customer m_Buyer;
	private Cashier m_Cashier;
	private Date m_Date;
	private double m_TotalBill;
	
	public Purchase(Customer i_Buyer,Cashier i_Cashier,Date i_Date)
	{
		m_ItemsAmount = new LinkedHashMap<>();
		m_Buyer = i_Buyer;
		m_Cashier = i_Cashier;
		m_Date = i_Date;
		m_TotalBill = 0;
	}
	
	public void AddAmount(Item i_Item,int i_Amount)
	{
		if(m_ItemsAmount.containsKey(i_Item))
		{
			i_Amount += m_ItemsAmount.get(i_Item);
			m_ItemsAmount.remove(i_Item);
		}
		m_ItemsAmount.put(i_Item, i_Amount);
	}
	
	public Purchase(JSONObject i_JSONPurchase) throws JSONException, CreateCustomerException, ParseException
	{
		JSONArray JSONArr;
		
		m_Buyer = CustomerFactory.CreateCustomer(i_JSONPurchase.getJSONObject("buyer"));
		m_Cashier = new  Cashier(i_JSONPurchase.getJSONObject("cashier"));
		m_Date = s_DateFormat.parse(i_JSONPurchase.getString("date"));
		JSONArr = i_JSONPurchase.getJSONArray("items");
		m_ItemsAmount = new LinkedHashMap<Item,Integer>();
		
		for(int i=0;i<JSONArr.length();i++)
		{
			m_ItemsAmount.put(new Item(JSONArr.getJSONObject(i).getJSONObject("item")),JSONArr.getJSONObject(i).getInt("amount"));
		}
	}
	
	public Map<Item,Integer> GetItems()
	{
		return m_ItemsAmount;
	}
	
	public JSONArray getItems()
	{
		JSONArray arrToReturn = new JSONArray();
		JSONObject itemAmount;
		for(Map.Entry<Item,Integer> pair : m_ItemsAmount.entrySet())
		{
			itemAmount = new JSONObject();
			itemAmount.put("item", pair.getKey().GetJSONObject());
			itemAmount.put("amount",pair.getValue());
			arrToReturn.put(itemAmount);
		}
		
		return arrToReturn;
	}
	
	@SuppressWarnings("deprecation")
	public boolean IsInTheSameDay(int day,int month,int year)
	{
		return m_Date.getYear() == year && m_Date.getMonth() == month && m_Date.getDay() == day;
	}
	
	public String getDate()
	{
		return s_DateFormat.format(m_Date);
	}
	
	public Cashier GetCashier()
	{
		return m_Cashier;
	}
	
	public JSONObject getCashier()
	{
		return m_Cashier.GetJSONObject();
	}
	
	public Customer GetBuyer()
	{
		return m_Buyer;
	}
	public void setTotalBill(double i_TotalBill)
	{
		m_TotalBill = i_TotalBill;
	}
	public double getTotalBill()
	{
		return m_TotalBill;
	}
	
	public eBrunches getBrunch()
	{
		return m_Cashier.getBranch();
	}
	
	public JSONObject getBuyer()
	{
		return m_Buyer.GetJSONObject();
	}
}
